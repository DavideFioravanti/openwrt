--- a/src/drv_mei_cpe_common.c
+++ b/src/drv_mei_cpe_common.c
@@ -19,7 +19,6 @@
 /* get at first the driver configuration */
 #include "drv_mei_cpe_config.h"
 
-#include "ifx_types.h"
 #include "drv_mei_cpe_os.h"
 #include "drv_mei_cpe_dbg.h"
 
--- a/src/drv_mei_cpe_linux.h
+++ b/src/drv_mei_cpe_linux.h
@@ -57,12 +57,6 @@
 #include <linux/poll.h>
 #include <linux/types.h>
 
-#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0))
-   #include <asm/ifx/ifx_types.h>
-#else
-   #include <ifx_types.h>
-#endif
-
 #endif /* #if (MEI_DRV_IFXOS_ENABLE == 0)*/
 
 #include <linux/dma-mapping.h>
--- a/src/drv_mei_cpe_api_atm_ptm_intern.c
+++ b/src/drv_mei_cpe_api_atm_ptm_intern.c
@@ -268,6 +268,7 @@ IFX_int32_t MEI_InternalXtmSwhowtimeExit
    return retVal;
 }
 
+#if 0
 IFX_int32_t MEI_InternalTcRequest(
                               MEI_DYN_CNTRL_T        *pMeiDynCntrl,
                               MEI_TC_Request_t       *pArgTcRequest)
@@ -326,6 +327,7 @@ IFX_int32_t MEI_InternalXtmSwhowtimeExit
    return retVal;
 }
+#endif

 #if MEI_SUPPORT_DEVICE_VR11 == 1
 IFX_int32_t MEI_InternalErbAddrUpdate(
                                   MEI_DYN_CNTRL_T        *pMeiDynCntrl)
@@ -410,6 +412,7 @@ IFX_int32_t MEI_InternalXtmSwhowtimeExit
 }
 #endif /* (MEI_SUPPORT_DEVICE_VR11 == 1) */
 
+#if 0
 IFX_int32_t MEI_InternalTcReset(
                               MEI_DYN_CNTRL_T        *pMeiDynCntrl,
                               MEI_TC_Reset_t         *pArgTcReset)
@@ -457,6 +460,7 @@ IFX_int32_t MEI_InternalTcReset(
 #endif /* (MEI_SUPPORT_DEVICE_VR11 != 1) */
    return retVal;
 }
+#endif
 
 #ifdef PPA_SUPPORTS_CALLBACKS
 /**
@@ -538,10 +542,57 @@ int ifx_mei_atm_led_blink(void)
     return IFX_SUCCESS;
 }
 
+#if MEI_MAX_DFE_CHAN_DEVICES > 1
+#error "Compat functions do not support MEI_MAX_DFE_CHAN_DEVICES > 1 yet"
+#else
+int (*ifx_mei_atm_showtime_enter)(struct port_cell_info *, void *) = NULL;
+int (*ifx_mei_atm_showtime_exit)(void) = NULL;
+
+int ltq_ifx_mei_atm_showtime_enter_compat(IFX_uint8_t dslLineNum,
+				      struct port_cell_info *cellInfo,
+				      void *xdata) {
+	if (ifx_mei_atm_showtime_enter)
+		return ifx_mei_atm_showtime_enter(cellInfo, xdata);
+
+	return -e_MEI_ERR_OP_FAILED;
+}
+
+int ltq_ifx_mei_atm_showtime_exit_compat(IFX_uint8_t dslLineNum) {
+	if (ifx_mei_atm_showtime_exit)
+		return ifx_mei_atm_showtime_exit();
+
+	return -e_MEI_ERR_OP_FAILED;
+}
+
+void* ppa_callback_get(e_ltq_mei_cb_type type) {
+	switch (type) {
+		case LTQ_MEI_SHOWTIME_ENTER:
+			return &ltq_ifx_mei_atm_showtime_enter_compat;
+		case LTQ_MEI_SHOWTIME_EXIT:
+			return &ltq_ifx_mei_atm_showtime_exit_compat;
+			break;
+	}
+
+	BUG();
+}
+
+int ifx_mei_atm_showtime_check(int *is_showtime,
+                              struct port_cell_info *port_cell,
+                              void **xdata_addr) {
+	return ltq_mei_showtime_check(0, is_showtime, port_cell, xdata_addr);
+}
+
+EXPORT_SYMBOL(ifx_mei_atm_showtime_enter);
+EXPORT_SYMBOL(ifx_mei_atm_showtime_exit);
+EXPORT_SYMBOL(ifx_mei_atm_showtime_check);
+#endif
+
 EXPORT_SYMBOL (MEI_InternalXtmSwhowtimeEntrySignal);
 EXPORT_SYMBOL (MEI_InternalXtmSwhowtimeExitSignal);
+#if 0
 EXPORT_SYMBOL (MEI_InternalTcRequest);
 EXPORT_SYMBOL (MEI_InternalTcReset);
+#endif
 #if MEI_SUPPORT_DEVICE_VR11 == 1
 EXPORT_SYMBOL (MEI_InternalErbAddrUpdate);
 #endif /* (MEI_SUPPORT_DEVICE_VR11 == 1) */
--- a/src/drv_mei_cpe_api_atm_ptm_intern.h
+++ b/src/drv_mei_cpe_api_atm_ptm_intern.h
@@ -74,9 +74,26 @@ extern IFX_int32_t MEI_InternalTcReset(
 extern IFX_int32_t MEI_InternalErbAddrUpdate(
                                   MEI_DYN_CNTRL_T        *pMeiDynCntrl);
 
+#if 1
+#include <lantiq_atm.h>
+typedef enum {
+	LTQ_MEI_SHOWTIME_ENTER,
+	LTQ_MEI_SHOWTIME_EXIT
+} e_ltq_mei_cb_type;
+
+typedef void (*ltq_mei_atm_showtime_enter_t)(IFX_uint8_t, struct port_cell_info *, void *);
+typedef void (*ltq_mei_atm_showtime_exit_t)(IFX_uint8_t);
+
+void* ppa_callback_get(e_ltq_mei_cb_type type);
+#else
 #ifdef PPA_SUPPORTS_CALLBACKS
 extern int ppa_callback_set(e_ltq_mei_cb_type type, void *func);
 extern void* ppa_callback_get(e_ltq_mei_cb_type type);
+#endif
+
+#endif
+
+#ifdef PPA_SUPPORTS_CALLBACKS
 
 int ltq_mei_showtime_check(
                               const unsigned char line_idx,
--- a/src/drv_mei_cpe_device_vrx.c
+++ b/src/drv_mei_cpe_device_vrx.c
@@ -28,23 +28,6 @@
 #include "drv_mei_cpe_api.h"
 #include "drv_mei_cpe_mei_vrx.h"
 
-#if defined(LINUX)
-#  if (LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0))
-#    if (MEI_SUPPORT_DEVICE_VR10_320 == 1)
-#       include "../drivers/net/ethernet/lantiq/lantiq_pcie.h"
-#    else
-#       include "ifx_pcie.h"
-#    endif
-#  else
-#    if (MEI_SUPPORT_DEVICE_VR11 == 1)
-#       include "net/dc_ep.h"
-#    elif (MEI_SUPPORT_DEVICE_VR10_320 == 1)
-#       include "../drivers/net/ethernet/lantiq/lantiq_pcie.h"
-#    else
-#       include "lantiq_pcie.h"
-#    endif
-#  endif
-#endif /* #if defined(LINUX)*/
 
 IFX_int32_t MEI_GPIntProcess(MEI_MeiRegVal_t processInt, MEI_DEV_T *pMeiDev)
 {
@@ -92,6 +75,7 @@ IFX_int32_t MEI_GetChipInfo(MEI_DEV_T *p
 */
 IFX_int32_t MEI_VR1x_PcieEntitiesCheck(IFX_uint8_t nEntityNum)
 {
+#if 0
    IFX_uint32_t pcie_entitiesNum;
 
    /* get information from pcie driver */
@@ -118,6 +102,9 @@ IFX_int32_t MEI_VR10_PcieEntitiesCheck(I
    }
 
    return IFX_SUCCESS;
+#else
+   return IFX_ERROR;
+#endif
 }
 
 /**
@@ -132,6 +119,7 @@ IFX_int32_t MEI_VR10_PcieEntitiesCheck(I
 */
 IFX_int32_t MEI_VR1x_PcieEntityInit(MEI_MEI_DRV_CNTRL_T *pMeiDrvCntrl)
 {
+#if 0
    IFX_uint8_t entityNum;
 #if (MEI_SUPPORT_DEVICE_VR11 == 1)
    struct dc_ep_dev MEI_pcie_ep_dev;
@@ -173,6 +161,9 @@ IFX_int32_t MEI_VR10_PcieEntityInit(MEI_
 #endif
 
    return IFX_SUCCESS;
+#else
+   return IFX_ERROR;
+#endif
 }
 
 /**
@@ -187,6 +178,7 @@ IFX_int32_t MEI_VR10_PcieEntityInit(MEI_
 */
 IFX_int32_t MEI_VR1x_PcieEntityFree(IFX_uint8_t entityNum)
 {
+#if 0
 #if (MEI_SUPPORT_DEVICE_VR11 == 1)
    if (dc_ep_dev_info_release(entityNum))
 #elif (MEI_SUPPORT_DEVICE_VR10_320 == 1)
@@ -202,6 +194,9 @@ IFX_int32_t MEI_VR10_PcieEntityFree(IFX_
    }
 
    return IFX_SUCCESS;
+#else
+   return IFX_ERROR;
+#endif
 }
 
 /**
@@ -216,6 +211,7 @@ IFX_int32_t MEI_VR10_PcieEntityFree(IFX_
 */
 IFX_int32_t MEI_VR1x_InternalInitDevice(MEI_DYN_CNTRL_T *pMeiDynCntrl)
 {
+#if 0
    IFX_int32_t         retVal;
    IOCTL_MEI_devInit_t InitDev;
    MEI_DEV_T           *pMeiDev = pMeiDynCntrl->pMeiDev;
@@ -243,6 +239,9 @@ IFX_int32_t MEI_VR10_InternalInitDevice(
 #endif
 
    return IFX_SUCCESS;
+#else
+   return IFX_ERROR;
+#endif
 }
 
 IFX_int32_t MEI_PLL_ConfigInit(MEI_DEV_T *pMeiDev)
--- a/src/drv_mei_cpe_dsm.c
+++ b/src/drv_mei_cpe_dsm.c
@@ -151,7 +151,7 @@ IFX_void_t MEI_VRX_DSM_DataInit(MEI_DEV_
    pMeiDev->meiFwDlCount = 0;
 
 #if MEI_SUPPORT_DEVICE_VR11 != 1
-   pMeiDev->meiERBbuf.pCallBackFunc = mei_dsm_cb_func_hook;
+   pMeiDev->meiERBbuf.pCallBackFunc = NULL;
    PRN_DBG_USR_NL( MEI_DRV, MEI_DRV_PRN_LEVEL_NORMAL,
             ("MEI_DRV: PP callback function addr = 0x%08X" MEI_DRV_CRLF,
             (IFX_uint32_t)(pMeiDev->meiERBbuf.pCallBackFunc)));
--- a/src/drv_mei_cpe_download_vrx.c
+++ b/src/drv_mei_cpe_download_vrx.c
@@ -3402,12 +3402,14 @@ IFX_int32_t MEI_DEV_IoctlFirmwareDownloa
    /* reset TC layer */
    if (ret == 0)
    {
+#if 0
       if (MEI_InternalTcReset(pMeiDynCntrl, &tc_reset) != 0)
       {
             PRN_ERR_USR_NL( MEI_DRV, MEI_DRV_PRN_LEVEL_WRN,
                   ("MEI_DRV[%02d]: Could not perform reset of TC-Layer!"
                    MEI_DRV_CRLF, MEI_DRV_LINENUM_GET(pMeiDev)));
       }
+#endif
    }
 #endif
 
